What happens when you initialize a repository? Why do you need to do it?

  폴더에서 git init을 치면 repository가 생성된다. 이는 git의 프로젝트가 repository단위로 snapshot을 관리하기 때문에 필요한 과정이다.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

  staging area는 working directory와 repository의 사이 임시 공간이다. 이는 commit이 여러개 파일을 포함해야 할 경우를 잘 지원해주는 개념이다.

How can you use the staging area to make sure you have one commit per logical
change?

  git diff 를 사용하여 working directory와 staging area 사이의 차이를 파악한다.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  여러가지 실험적인 코드의 변경이 있어야 할 때, 메인 프레임을 바꾸는 것은 큰 위험 부담을 안을 수 밖에 없다. 따라서 이렇게 부가적이며 위험성을 낮추고자 하는 변경을 하고자 할 때 branch를 통해 코드 변경을 하면 좋다.

How do the diagrams help you visualize the branch structure?

  다이아그램은 git에서 commit된 내용들의 history를 도식하여 표현해주므로 이해하기 쉽다.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

  두개의 branch의 최신 commit을 부모로하는 commit이 새로 생기며 새로운 branch가 된다. 쉽게 보기 위해 diagram을 그린다.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

  merging하는 것을 자동으로 하는 것은 여러개의 변경점이 있을 때 이를 작성한 사용자에게 묻는 manually merging방법이 제일 안전하며 정확하다. 이 때문에 automatic하게 merging하는 것은 편하기는 하나 부정확할 수 있다.